---
title: "Basi di Dati - analisi in R"
author: "Gianluca Fabris, Andrea Martin, Andrea Brollo, Alessio Stefan"
date: "12/19/2022"
output: html_document
---

```{r setup, include=FALSE}
library("dplyr")
library("ggplot2")
library("plotly")
library("scatterplot3d")
library("RPostgreSQL")
```

```{r}
drv <- dbDriver("PostgreSQL")

con <- dbConnect(drv, dbname="Zoo", host="192.168.1.64", port=5432, user="pine", password="armIsPower2023")

```

```{r}
esemplare_animale <- dbGetQuery(con, "SELECT * FROM Esemplare_Animale")

```

```{r}
# analisi ridondanze semplificate

# -3x+100200y+101z > 0

# risolvere per z
# z > (-3x+100200y)/(-101)
# z < 0
# sempre negativa
matrixXY = matrix(nrow=1000,ncol=1000)

for(x in c(0:999)){
  for(y in c(0:999)){
    matrixXY[x,y] = (-3*x+100200*y)/-101
  }
}

plot_ly()%>%
  add_surface(matrixXY)%>%
  layout(title="(-3x+100200y)/(-101)")

# risolvere per y
# y > (-3x+101z)/(-100200)
# y < 0
# piccola parte positiva per valori x piccoli e z grandi (0,30) - (30, 1000)
matrixXZ = matrix(nrow=1000,ncol=1000)

for(x in c(0:999)){
  for(y in c(0:999)){
    matrixXZ[x,y] = (-3*x+101*y)/-100200
  }
}

plot_ly()%>%
  add_surface(matrixXZ)%>%
  layout(title="(-3x+101z)/(-100200)")

# risolvere in x
# x < (100200y+101z)/3
# x > 0
# sempre positiva
# (non ha senso nel nostro dominio)
matrixYZ = matrix(nrow=1000,ncol=1000)

for(x in c(0:999)){
  for(y in c(0:999)){
    matrixYZ[x,y] = (100200*x+101*y)/3
  }
}

plot_ly()%>%
  add_surface(matrixYZ)%>%
  layout(title="(100200y+101z)/3")

```

```{r}
# analisi ridondanze

# -3x+100200y+101z > 0
# piccola parte negativa per valori x grandi e z piccoli (0,1) - (50, 1)

dfXYZ = data.frame(matrix(ncol = 4, nrow = 1000000))
names(dfXYZ) = c("x", "y", "z", "w")

counter = 0
#riduco perchè con valori molto alti il risultato è molto positivo, come da precedente rappresentazione
for(x in c(0:99)){
  for(y in c(0:99)){
    for(z in c(0:99)){
      dfXYZ[counter+1,] = c(x, y, z, -3*x+100200*y+101*z)
      counter = counter+1
    }
  }
}

write.csv(dfXYZ, "data/dataframe.csv", row.names = FALSE)

dfXYZ = read.csv("data/dataframe.csv")

dfXYZColors = dfXYZ

dfXYZColors$w[dfXYZColors$w>0] = "green"
dfXYZColors$w[dfXYZColors$w<=0] = "red"

scatterplot3d(dfXYZColors, pch = 16, main="-3x+100200y+101z", xlab = "x", ylab = "y", zlab = "z")

```

```{r}
# analisi indici

# y = log_2(x/6)-(log_512(x/6)+1)

dfindex1 = data.frame(matrix(ncol = 3, nrow = 250000))
names(dfindex1) = c("x", "y", "z")

dfindex1$x = c(1:250000)
dfindex1$y = log(dfindex1$x/6,2)-(log(dfindex1$x/6,512)+1)
dfindex1$z[dfindex1$y<=0] = "green" # sarebbe l'inverso ma il grafico li inverte
dfindex1$z[dfindex1$y>0] = "red" # sarebbe l'inverso ma il grafico li inverte

ggplot() +
  geom_line(data=dfindex1, mapping=aes(x = x, y = y, color=z), show.legend = FALSE) +
  scale_x_continuous(limits=c(0, 250000), breaks=seq(0, 250000, 50000)) +
  scale_y_continuous(limits=c(-15, 15), breaks=seq(-15, 15, 5)) +
  labs(title = "y = log_2(x/6)-(log_512(x/6)+1)", x = "x", y = "y") +
  theme_minimal() +
  theme(axis.text.x=element_text(color="#000000", angle = 90), axis.text.y=element_text(color="#000000"), axis.line=element_line(color="#000000"), panel.background=element_rect(fill="#ffffff"), panel.grid.major.x=element_line(colour="#ebebeb"), panel.grid.major.y=element_line(colour="#ebebeb"), plot.title=element_text(size=rel(1.5)))


# y = log_2(x/44)-(log_512(x/44)+1)

dfindex2 = data.frame(matrix(ncol = 3, nrow = 250000))
names(dfindex2) = c("x", "y", "z")

dfindex2$x = c(1:250000)
dfindex2$y = log(dfindex2$x/44,2)-(log(dfindex2$x/44,512)+1)
dfindex2$z[dfindex2$y<=0] = "green" # sarebbe l'inverso ma il grafico li inverte
dfindex2$z[dfindex2$y>0] = "red" # sarebbe l'inverso ma il grafico li inverte

ggplot() +
  geom_line(data=dfindex2, mapping=aes(x = x, y = y, color=z), show.legend = FALSE) +
  scale_x_continuous(limits=c(0, 250000), breaks=seq(0, 250000, 50000)) +
  scale_y_continuous(limits=c(-15, 15), breaks=seq(-15, 15, 5)) +
  labs(title = "y = log_2(x/44)-(log_512(x/44)+1)", x = "x", y = "y") +
  theme_minimal() +
  theme(axis.text.x=element_text(color="#000000", angle = 90), axis.text.y=element_text(color="#000000"), axis.line=element_line(color="#000000"), panel.background=element_rect(fill="#ffffff"), panel.grid.major.x=element_line(colour="#ebebeb"), panel.grid.major.y=element_line(colour="#ebebeb"), plot.title=element_text(size=rel(1.5)))

```

```{r}
# query

# operazione 1: ultimo controllo veterinario di un esemplare di animale
random_index = sample(1:nrow(esemplare_animale), 1, replace=T)
op1_res = dbGetQuery(con, paste("select data, animale, Visita_Veterinaria_Corrente.specie, malattia, peso, dieta, veterinario from Visita_Veterinaria_Corrente, Esemplare_Animale where animale = codice and Visita_Veterinaria_Corrente.specie = Esemplare_Animale.specie and codice = ", esemplare_animale$codice[random_index], " and Esemplare_Animale.specie = '", esemplare_animale$specie[random_index], "';", sep = ""))
op1_res

# operazione 3: lista esemplari di animale (attuali) presenti nello zoo, divisi per aree
op3_res = dbGetQuery(con, "select codice, paese_provenienza, sesso, Esemplare_Animale.nome, data_nascita, data_entrata, data_uscita, Esemplare_Animale.specie, numero_visite_veterinarie, Area.nome as area from Esemplare_Animale, Gabbia, Casa, Area where animale = codice and Gabbia.specie = Esemplare_Animale.specie and casa = numero and Gabbia.area = Casa.area and Casa.area = Area.nome and data_uscita is null order by Area.nome;")
op3_res

# operazione 4: dato un esemplare di animale visualizzare la gabbia, casa, area
random_index = sample(1:nrow(esemplare_animale), 1, replace=T)
op4_res = dbGetQuery(con, paste("select lettera as gabbia, numero as casa, Area.nome as area from Esemplare_Animale, Gabbia, Casa, Area where animale = codice and Gabbia.specie = Esemplare_Animale.specie and casa = numero and Gabbia.area = Casa.area and Casa.area = Area.nome and codice = ", esemplare_animale$codice[random_index], " and Esemplare_Animale.specie = '", esemplare_animale$specie[random_index], "';", sep = ""))
op4_res

# operazione 6: visualizzazione delle gabbie vuote
op6_res = dbGetQuery(con, "select lettera as gabbia, numero as casa, Area.nome as area from Gabbia, Casa, Area where casa = numero and Gabbia.area = Casa.area and Casa.area = Area.nome and animale is null and specie is null;")
op6_res

# operazione 7: esemplari di animale con ultimo controllo veterinario oltre un mese fa
op7_res = dbGetQuery(con, "select codice, paese_provenienza, sesso, Esemplare_Animale.nome, data_nascita, data_entrata, data_uscita, Esemplare_Animale.specie, numero_visite_veterinarie, data from Visita_Veterinaria_Corrente, Esemplare_Animale where animale = codice and Visita_Veterinaria_Corrente.specie = Esemplare_Animale.specie and data < (now() - interval '1 MONTH');")
op7_res

# operazione 8: media controlli veterinari veterinarie per ogni specie
op8_res = dbGetQuery(con, "select Esemplare_Animale.specie, avg(numero_visite_veterinarie) from Specie_Animale, Esemplare_Animale where Specie_Animale.specie = Esemplare_Animale.specie group by Esemplare_Animale.specie;")
op8_res

# operazione 9: numero di controlli veterinari effettuati su una esemplare di animale rispetto la sua specie
random_index = sample(1:nrow(esemplare_animale), 1, replace=T)
op9_res = dbGetQuery(con, paste("select ea1.codice, ea1.paese_provenienza, ea1.sesso, ea1.nome, ea1.data_nascita, ea1.data_entrata, ea1.data_uscita, ea1.specie, ea1.numero_visite_veterinarie / (select avg(ea2.numero_visite_veterinarie) from Esemplare_Animale as ea2 where ea2.specie = ea1.specie) from Esemplare_Animale as ea1 where ea1.codice = ", esemplare_animale$codice[random_index], " and ea1.specie = '", esemplare_animale$specie[random_index], "';", sep = ""))
op9_res

# operazione: visualizzare lo storico delle visite veterinarie di un esemplare di animale
random_index = sample(1:nrow(esemplare_animale), 1, replace=T)
op1extra_res = dbGetQuery(con, paste("select data, animale, Visita_Veterinaria_Storico.specie, malattia, peso, dieta, veterinario from Visita_Veterinaria_Storico, Esemplare_Animale where animale = codice and Visita_Veterinaria_Storico.specie = Esemplare_Animale.specie and codice = ", esemplare_animale$codice[random_index], " and Esemplare_Animale.specie = '", esemplare_animale$specie[random_index], "' union select data, animale, Visita_Veterinaria_Corrente.specie, malattia, peso, dieta, veterinario from Visita_Veterinaria_Corrente, Esemplare_Animale where animale = codice and Visita_Veterinaria_Corrente.specie = Esemplare_Animale.specie and codice = ", esemplare_animale$codice[random_index], " and Esemplare_Animale.specie = '", esemplare_animale$specie[random_index], "';", sep = ""))
op1extra_res

# operazione: visualizzare i turni degli interventi di pulizia dei rispettivi giorni della settimana, addetti, case e aree
op2extra_res = dbGetQuery(con, "select giorno_settimanale, codice_fiscale, Persona.nome, cognome, numero as casa, Area.nome as area from Intervento_Pulizia, Persona, Casa, Area where addetto = codice_fiscale and casa = numero and Intervento_Pulizia.area = Casa.area and Casa.area = Area.nome;")
op2extra_res

```

```{r}
# altre analisi database

# animali tutti/usciti/presenti

animali_tutti = dbGetQuery(con, "SELECT count(*) as n, specie FROM Esemplare_Animale group by specie")
ggplot() +
  geom_col(data=animali_tutti, mapping=aes(x = specie, y = n, color=specie), show.legend = FALSE) +
  scale_y_continuous(limits=c(0, 25), breaks=seq(0, 25, 5)) +
  labs(title = "Animali tutti", x = "specie", y = "numero") +
  theme_minimal() +
  theme(axis.text.x=element_text(color="#000000", angle = 90), axis.text.y=element_text(color="#000000"), axis.line=element_line(color="#000000"), panel.background=element_rect(fill="#ffffff"), panel.grid.major.x=element_line(colour="#ebebeb"), panel.grid.major.y=element_line(colour="#ebebeb"), plot.title=element_text(size=rel(1.5)))

animali_usciti = dbGetQuery(con, "SELECT count(*) as n, specie FROM Esemplare_Animale where data_uscita is not null group by specie")
ggplot() +
  geom_col(data=animali_usciti, mapping=aes(x = specie, y = n, color=specie), show.legend = FALSE) +
  scale_y_continuous(limits=c(0, 25), breaks=seq(0, 25, 5)) +
  labs(title = "Animali usciti", x = "specie", y = "numero") +
  theme_minimal() +
  theme(axis.text.x=element_text(color="#000000", angle = 90), axis.text.y=element_text(color="#000000"), axis.line=element_line(color="#000000"), panel.background=element_rect(fill="#ffffff"), panel.grid.major.x=element_line(colour="#ebebeb"), panel.grid.major.y=element_line(colour="#ebebeb"), plot.title=element_text(size=rel(1.5)))

animali_presenti = dbGetQuery(con, "SELECT count(*) as n, specie FROM Esemplare_Animale where data_uscita is null group by specie")
ggplot() +
  geom_col(data=animali_presenti, mapping=aes(x = specie, y = n, color=specie), show.legend = FALSE) +
  scale_y_continuous(limits=c(0, 25), breaks=seq(0, 25, 5)) +
  labs(title = "Animali presenti", x = "specie", y = "numero") +
  theme_minimal() +
  theme(axis.text.x=element_text(color="#000000", angle = 90), axis.text.y=element_text(color="#000000"), axis.line=element_line(color="#000000"), panel.background=element_rect(fill="#ffffff"), panel.grid.major.x=element_line(colour="#ebebeb"), panel.grid.major.y=element_line(colour="#ebebeb"), plot.title=element_text(size=rel(1.5)))

# numero gabbie totali/vuote per casa

gabbie_totali <- dbGetQuery(con, "select count(*) as n, concat(area, casa) as nomecasa from Gabbia group by casa, area order by area, casa;")
ggplot() +
  geom_col(data=gabbie_totali, mapping=aes(x = nomecasa, y = n, color=nomecasa), show.legend = FALSE) +
  scale_y_continuous(limits=c(0, 10), breaks=seq(0, 10, 1)) +
  labs(title = "Gabbie totali", x = "casa area", y = "numero") +
  theme_minimal() +
  theme(axis.text.x=element_text(color="#000000", angle = 90), axis.text.y=element_text(color="#000000"), axis.line=element_line(color="#000000"), panel.background=element_rect(fill="#ffffff"), panel.grid.major.x=element_line(colour="#ebebeb"), panel.grid.major.y=element_line(colour="#ebebeb"), plot.title=element_text(size=rel(1.5)))

gabbie_vuote <- dbGetQuery(con, "select count(*) as n, concat(area, casa) as nomecasa from Gabbia where animale is null and specie is null group by casa, area order by area, casa;")
ggplot() +
  geom_col(data=gabbie_vuote, mapping=aes(x = nomecasa, y = n, color=nomecasa), show.legend = FALSE) +
  scale_y_continuous(limits=c(0, 10), breaks=seq(0, 10, 1)) +
  labs(title = "Gabbie vuote", x = "casa area", y = "numero") +
  theme_minimal() +
  theme(axis.text.x=element_text(color="#000000", angle = 90), axis.text.y=element_text(color="#000000"), axis.line=element_line(color="#000000"), panel.background=element_rect(fill="#ffffff"), panel.grid.major.x=element_line(colour="#ebebeb"), panel.grid.major.y=element_line(colour="#ebebeb"), plot.title=element_text(size=rel(1.5)))

gabbie_occupate <- dbGetQuery(con, "select count(*) as n, concat(area, casa) as nomecasa from Gabbia where animale is not null and specie is not null group by casa, area order by area, casa;")
ggplot() +
  geom_col(data=gabbie_occupate, mapping=aes(x = nomecasa, y = n, color=nomecasa), show.legend = FALSE) +
  scale_y_continuous(limits=c(0, 10), breaks=seq(0, 10, 1)) +
  labs(title = "Gabbie occupate", x = "casa area", y = "numero") +
  theme_minimal() +
  theme(axis.text.x=element_text(color="#000000", angle = 90), axis.text.y=element_text(color="#000000"), axis.line=element_line(color="#000000"), panel.background=element_rect(fill="#ffffff"), panel.grid.major.x=element_line(colour="#ebebeb"), panel.grid.major.y=element_line(colour="#ebebeb"), plot.title=element_text(size=rel(1.5)))

# costo animali

numero_visite_veterinarie = dbGetQuery(con, "select numero_visite_veterinarie as n, concat(specie, codice) as animale from Esemplare_Animale order by specie, codice;")
ggplot() +
  geom_col(data=numero_visite_veterinarie, mapping=aes(x = animale, y = n, color=animale), show.legend = FALSE) +
  scale_y_continuous(limits=c(0, 150), breaks=seq(0, 150, 10)) +
  labs(title = "Numero visite verinarie", x = "animale specie", y = "numero") +
  theme_minimal() +
  theme(axis.text.x=element_blank(), axis.text.y=element_text(color="#000000"), axis.line=element_line(color="#000000"), panel.background=element_rect(fill="#ffffff"), panel.grid.major.x=element_line(colour="#ebebeb"), panel.grid.major.y=element_line(colour="#ebebeb"), plot.title=element_text(size=rel(1.5)))

costo_specie = dbGetQuery(con, "select Esemplare_Animale.specie as specie, avg(numero_visite_veterinarie) as media from Specie_Animale, Esemplare_Animale where Specie_Animale.specie = Esemplare_Animale.specie group by Esemplare_Animale.specie;")
ggplot() +
  geom_col(data=costo_specie, mapping=aes(x = specie, y = media, color=specie), show.legend = FALSE) +
  scale_y_continuous(limits=c(0, 150), breaks=seq(0, 150, 10)) +
  labs(title = "Numero visite verinarie - media specie", x = "specie", y = "numero") +
  theme_minimal() +
  theme(axis.text.x=element_text(color="#000000", angle = 90), axis.text.y=element_text(color="#000000"), axis.line=element_line(color="#000000"), panel.background=element_rect(fill="#ffffff"), panel.grid.major.x=element_line(colour="#ebebeb"), panel.grid.major.y=element_line(colour="#ebebeb"), plot.title=element_text(size=rel(1.5)))

costo_animale = dbGetQuery(con, "select concat(specie, codice) as animale, (numero_visite_veterinarie - (select avg(numero_visite_veterinarie) from Esemplare_Animale as ea2 where ea2.specie = ea1.specie)) / (select avg(numero_visite_veterinarie) from Esemplare_Animale as ea2 where ea2.specie = ea1.specie) as percvsmedia from Esemplare_Animale as ea1 order by specie, codice")
ggplot() +
  geom_col(data=costo_animale, mapping=aes(x = animale, y = percvsmedia, color=animale), show.legend = FALSE) +
  geom_hline(data=costo_animale, mapping=aes(yintercept=0, color="#000000"), show.legend = FALSE) +
  scale_y_continuous(limits=c(-1, 10), breaks=seq(-1, 10, 1)) +
  labs(title = "Numero visite verinarie - animale rispetto specie", x = "animale specie", y = "percentuale rispetto alla media") +
  theme_minimal() +
  theme(axis.text.x=element_blank(), axis.text.y=element_text(color="#000000"), axis.line=element_line(color="#000000"), panel.background=element_rect(fill="#ffffff"), panel.grid.major.x=element_line(colour="#ebebeb"), panel.grid.major.y=element_line(colour="#ebebeb"), plot.title=element_text(size=rel(1.5)))

# salute animale

random_index = sample(1:nrow(esemplare_animale), 1, replace=T)
salute_animale = dbGetQuery(con, paste("select data, peso, malattia from Visita_Veterinaria_Storico where animale = ", esemplare_animale$codice[random_index], " and specie = '", esemplare_animale$specie[random_index], "' union select data, peso, malattia from Visita_Veterinaria_Corrente where animale = ", esemplare_animale$codice[random_index], " and specie = '", esemplare_animale$specie[random_index], "';", sep = ""))
salute_animale$data = format(salute_animale$data, "%Y-%m-%d")
data_malattia = as.data.frame(salute_animale$data[salute_animale$malattia != ""])
names(data_malattia) = c("data")
ggplot() +
  geom_line(data=salute_animale, mapping=aes(x = data, y = peso), group = 1, show.legend = FALSE) +
  geom_vline(data=data_malattia, mapping=aes(xintercept=data), color="#ff0000", show.legend = FALSE) +
  labs(title = paste("Salute di ", esemplare_animale$nome[random_index], sep = ""), x = "data", y = "peso") +
  theme_minimal() +
  theme(axis.text.x=element_blank(), axis.text.y=element_text(color="#000000"), axis.line=element_line(color="#000000"), panel.background=element_rect(fill="#ffffff"), panel.grid.major.x=element_line(colour="#ebebeb"), panel.grid.major.y=element_line(colour="#ebebeb"), plot.title=element_text(size=rel(1.5)))

```
